#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod share_tokens 
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////"dataImports"//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    use ink::prelude::string::String;
    use ink::storage::Mapping;



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////"inkStorageVariablesStruct"////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    #[ink(storage)]
    pub struct ShareTokens 
    {
        jericho_lending_protocol_address: AccountId,

        balances: Mapping<AccountId, u128>,

        total_supply: u128,
        decimals: u128,
        name: String,
        symbol: String,
    }



    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////"inkFunctionMessages"//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    impl ShareTokens 
    {
        ////////////////////////////////////////////////////////////////////////////
        /////"CONSTRUCTORS"/////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////
        #[ink(constructor)]
        pub fn new(param_name: String, param_symbol: String) -> Self 
        {
            let empty_mapping = Mapping::default();
            let _decimals = 12;

            Self {jericho_lending_protocol_address: AccountId::from([0x42; 32]), balances: empty_mapping, total_supply: 0, decimals: _decimals, name: param_name, symbol: param_symbol}
        }

        ////////////////////////////////////////////////////////////////////////////
        /////"FUNCTIONS"////////////////////////////////////////////////////////////
        ////////////////////////////////////////////////////////////////////////////
        #[ink[message]]
        pub fn set_jericho_lending_protocol_address(&mut self, param_jericho_lending_protocol_address: AccountId)
        {
            self.jericho_lending_protocol_address = param_jericho_lending_protocol_address;
        }

        #[ink[message]]
        pub fn mint_tokens(&mut self, param_address_to_mint: AccountId, param_quantity: u128)
        {
            let caller = self.env().caller();

            assert!(caller == self.jericho_lending_protocol_address, "Caller not vault.");

            let mut actual_address_to_mint_balance = self.balances.get(param_address_to_mint).unwrap_or(0);
            actual_address_to_mint_balance += param_quantity;

            self.total_supply += param_quantity;

            self.balances.insert(&param_address_to_mint, &actual_address_to_mint_balance);
        }

        #[ink[message]]
        pub fn burn_tokens(&mut self, param_address_tokens_to_burn: AccountId ,param_quantity: u128)
        {
            let caller = self.env().caller();

            assert!(caller == self.jericho_lending_protocol_address, "Caller not vault.");



            let mut actual_address_tokens_to_burn_balance = self.balances.get(param_address_tokens_to_burn).unwrap_or(0);
            actual_address_tokens_to_burn_balance -= param_quantity;

            self.total_supply -= param_quantity;

            self.balances.insert(&param_address_tokens_to_burn, &actual_address_tokens_to_burn_balance);
        }

        #[ink(message)]
        pub fn balance_of(&self, param_address_to_check: AccountId) -> u128
        {
            self.balances.get(param_address_to_check).unwrap_or(0)
        }

        #[ink(message)]
        pub fn get_name(&self) -> String
        {
            self.name.clone()
        }

        #[ink(message)]
        pub fn get_symbol(&self) -> String
        {
            self.symbol.clone()
        }

        #[ink(message)]
        pub fn get_decimals(&self) -> u128
        {
            self.decimals
        }

        #[ink(message)]
        pub fn get_total_supply(&self) -> u128
        {
            self.total_supply
        }

        #[ink(message)]
        pub fn get_account_address(&self) -> AccountId
        {
            self.env().account_id()
        }
    }
}
